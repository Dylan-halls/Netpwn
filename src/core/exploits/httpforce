#! /usr/bin/env python

#Author: Dylan Halls

import os
import sys
import socket
import libnet
import base64
import random
from libnet.constants import *
os.sys.path.append(os.path.dirname(os.path.abspath('.'))) #fix import path
from sniffer.sniffer import Sniffer

class PacketFactory(object):
    """Packet Factory builds the packets use by HTTPForce"""
    def __init__(self, httpforce):
        super(PacketFactory, self).__init__()
        self.hf = httpforce

    def create_wire_context(self):
        self.hf.wire = libnet.context(LINK, self.hf.iface)

    def build_rst(self):
        self.create_wire_context()
        tcptag = self.hf.wire.build_tcp(
                                     dp      = self.hf.packet['TCP_DPORT'],
                                     sp      = self.hf.packet['TCP_SPORT'],
                                     control = TH_RST,
                                     seq     = self.hf.packet['TCP_SEQ_NUM']+1,
                                     ack     = self.hf.packet['TCP_ACK_NUM'],
                                     payload = self.hf.unique_id
                                    )

        iptag = self.hf.wire.build_ipv4(
                                     prot = IPPROTO_TCP,
                                     dst  = socket.inet_aton(self.hf.packet['IP_DST']),
                                     src  = socket.inet_aton(self.hf.packet['IP_SRC'])
                                    )

        ethtag = self.hf.wire.build_ethernet(
                                          dst = self.hf.wire.hex_aton(self.hf.packet['ETH_DHOST']),
                                          src = self.hf.wire.hex_aton(self.hf.packet['ETH_SHOST'])
                                         )

    def destroy(self):
        del self.hf.wire
        del self.hf.packet

class HTTPForce(object):
    def __init__(self, arg):
        super(HTTPForce, self).__init__()
        self.iface     = arg
        self.sniffer   = Sniffer()
        self.pf        = PacketFactory(self)
        self.ssl_ports = [443, 465, 563, 585, 636, 695, 898, 989, 990, 992, 993, 994, 995]
        self.unique_id = base64.b64encode(str(random.randint(0, 10000)))
        self.sniffer.init(self.iface)

    def _check_ssl(self):
        sport = self.packet['TCP_SPORT']
        for port in self.ssl_ports:
            if sport == port:
                return -1
        return 1

    def _check_http(self):
        payload = self.packet['TCP_PAYLOAD']
        if len(payload) > 0:
            for i in payload.split():
                if i == "HTTP/1.1" or i == "HTTP/2.0":
                    return 1
        return -1

    def _check_handshake(self):
        #TODO: make function to clear all packet variables
        try:
            del self.dst
            del self.src
        except AttributeError: pass
        if self.packet['TCP_SYN'] == 1:
            self.dst = self.packet['IP_DST']
            self.src = self.packet['IP_SRC']
            return 1
        return -1

    def _injectRST(self):
        self.pf.build_rst()
        self.wire.write()
        self.pf.destroy()

    def pkt_handler(self, packet):
        self.packet = packet
        try:
            if self.packet['IP_PROTO'] == IPPROTO_TCP:
                if self._check_handshake() != -1:
                    if self._check_ssl() == 1: #Kill HTTP at the moment
                        self._injectRST()
                        
        except KeyError: pass

    def enforcer(self):
        while True:
            self.pkt_handler(self.sniffer.sniff())

if __name__ == '__main__':
    httpforce = HTTPForce('wlp3s0')
    httpforce.enforcer()
